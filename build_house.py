#!/usr/bin/python
from mcpi.minecraft import Minecraft
from mcpi.block import *
from mcpi.vec3 import Vec3
from mcpi.util import *

from skyscraper import *

s = Block(53, 1)
r = Block(53, 2)
R = Block(53, 3)
N = AIR #None
B = BRICK_BLOCK
g = GLASS
W = WOOD_PLANKS
c = Block(156,3)
d = Block(64, 2)
D = Block(64, 10)
z = None
q = Block(26,0)
Q = Block(26,8)

roof = [
[  [  N,N,N,N,N,r,R,N,N,N,N,N, ],
   [  N,N,N,N,N,r,R,N,N,N,N,N, ],
   [  N,N,N,N,N,r,R,N,N,N,N,N, ],
   [  N,N,N,N,N,r,R,N,N,N,N,N, ],
   [  N,N,N,N,N,r,R,N,N,N,N,N, ],
   [  N,N,N,N,N,r,R,N,N,N,N,N, ],
   [  N,N,N,N,N,r,R,N,N,N,N,N, ],
   [  N,N,N,N,N,r,R,N,N,N,N,N, ],
   [  N,N,N,N,N,r,R,N,N,N,N,N, ],
   [  N,N,N,N,N,r,R,N,N,N,N,N, ],
   [  N,N,N,N,N,r,R,N,N,N,N,N, ],
   [  N,N,N,N,N,r,R,N,N,N,N,N, ],
   [  N,N,N,N,N,r,R,N,N,N,N,N, ],
],
[  [  N,N,N,N,r,N,N,R,N,N,N,N, ],
   [  N,N,N,N,r,B,B,R,N,N,N,N, ],
   [  N,N,N,N,r,N,N,R,N,N,N,N, ],
   [  N,N,N,N,r,N,N,R,N,N,N,N, ],
   [  N,N,N,N,r,N,N,R,N,N,N,N, ],
   [  N,N,N,N,r,N,N,R,N,N,N,N, ],
   [  N,N,N,N,r,N,N,R,N,N,N,N, ],
   [  N,N,N,N,r,N,N,R,N,N,N,N, ],
   [  N,N,N,N,r,N,N,R,N,N,N,N, ],
   [  N,N,N,N,r,N,N,R,N,N,N,N, ],
   [  N,N,N,N,r,N,N,R,N,N,N,N, ],
   [  N,N,N,N,r,B,B,R,N,N,N,N, ],
   [  N,N,N,N,r,N,N,R,N,N,N,N, ],
],
[  [  N,N,N,r,N,N,N,N,R,N,N,N, ],
   [  N,N,N,r,B,B,B,B,R,N,N,N, ],
   [  N,N,N,r,N,N,N,N,R,N,N,N, ],
   [  N,N,N,r,N,N,N,N,R,N,N,N, ],
   [  N,N,N,r,N,N,N,N,R,N,N,N, ],
   [  N,N,N,r,N,N,N,N,R,N,N,N, ],
   [  N,N,N,r,N,N,N,N,R,N,N,N, ],
   [  N,N,N,r,N,N,N,N,R,N,N,N, ],
   [  N,N,N,r,N,N,N,N,R,N,N,N, ],
   [  N,N,N,r,N,N,N,N,R,N,N,N, ],
   [  N,N,N,r,N,N,N,N,R,N,N,N, ],
   [  N,N,N,r,B,B,B,B,R,N,N,N, ],
   [  N,N,N,r,N,N,N,N,R,N,N,N, ],
],
[  [  N,N,r,N,N,N,N,N,N,R,N,N, ],
   [  N,N,r,B,B,g,g,B,B,R,N,N, ],
   [  N,N,r,N,N,N,N,N,N,R,N,N, ],
   [  N,N,r,N,N,N,N,N,N,R,N,N, ],
   [  N,N,r,N,N,N,N,N,N,R,N,N, ],
   [  N,N,r,N,N,N,N,N,N,R,N,N, ],
   [  N,N,r,N,N,N,N,N,N,R,N,N, ],
   [  N,N,r,N,N,N,N,N,N,R,N,N, ],
   [  N,N,r,N,N,N,N,N,N,R,N,N, ],
   [  N,N,r,N,N,N,N,N,N,R,N,N, ],
   [  N,N,r,N,N,N,N,N,N,R,N,N, ],
   [  N,N,r,B,B,g,g,B,B,R,N,N, ],
   [  N,N,r,N,N,N,N,N,N,R,N,N, ],
],
[  [  N,r,N,N,N,N,N,N,N,N,R,N, ],
   [  N,r,B,B,B,g,g,B,B,B,R,N, ],
   [  N,r,N,N,N,N,N,N,N,N,R,N, ],
   [  N,r,N,N,N,N,N,N,N,N,R,N, ],
   [  N,r,N,N,N,N,N,N,N,N,R,N, ],
   [  N,r,N,N,N,N,N,N,N,N,R,N, ],
   [  N,r,N,N,N,N,N,N,N,N,R,N, ],
   [  N,r,N,N,N,N,N,N,N,N,R,N, ],
   [  N,r,N,N,N,N,N,N,N,N,R,N, ],
   [  N,r,N,N,N,N,N,N,N,N,R,N, ],
   [  N,r,N,N,N,N,N,N,N,N,R,N, ],
   [  N,r,B,B,B,g,g,B,B,B,R,N, ],
   [  N,r,N,N,N,N,N,N,N,N,R,N, ],
],
[  [  r,N,N,N,N,N,N,N,N,N,N,R, ],
   [  r,B,B,B,B,B,B,B,B,B,B,R, ],
   [  r,B,N,N,N,N,N,N,N,N,B,R, ],
   [  r,B,N,N,N,N,N,N,N,N,B,R, ],
   [  r,B,N,N,N,N,N,N,N,N,B,R, ],
   [  r,B,N,N,N,N,N,N,N,N,B,R, ],
   [  r,B,N,N,N,N,N,N,N,N,B,R, ],
   [  r,B,N,N,N,N,N,N,N,N,B,R, ],
   [  r,B,N,N,N,N,N,N,N,N,B,R, ],
   [  r,B,N,N,N,N,N,N,N,N,B,R, ],
   [  r,B,N,N,N,N,N,N,N,N,B,R, ],
   [  r,B,B,B,B,B,B,B,B,B,B,R, ],
   [  r,N,N,N,N,N,N,N,N,N,N,R, ],
],
[  [  N,N,N,N,N,N,N,N,N,N,N,N, ],
   [  N,B,B,B,B,B,B,B,B,B,B,N, ],
   [  N,B,W,W,W,W,W,W,W,W,B,N, ],
   [  N,B,W,W,W,W,W,W,W,W,B,N, ],
   [  N,B,W,W,W,W,W,W,W,W,B,N, ],
   [  N,B,W,W,W,W,W,W,W,W,B,N, ],
   [  N,B,W,W,W,W,W,W,W,W,B,N, ],
   [  N,B,W,W,W,W,W,W,W,W,B,N, ],
   [  N,B,W,W,W,W,W,W,W,W,B,N, ],
   [  N,B,W,W,W,W,W,W,W,W,B,N, ],
   [  N,B,W,R,N,N,N,W,W,W,B,N, ],
   [  N,B,B,B,B,B,B,B,B,B,B,N, ],
   [  N,N,N,N,N,N,N,N,N,N,N,N, ],
],
]
# #############################################

second_floor = [
[
   [  N,N,N,N,N,N,N,N,N,N,N,N, ],
   [  N,B,g,g,B,B,B,B,g,g,B,N, ],
   [  N,B,N,N,N,N,W,N,N,N,B,N, ],
   [  N,g,N,N,N,N,W,N,N,N,g,N, ],
   [  N,g,N,N,N,N,W,N,N,N,g,N, ],
   [  N,g,N,N,N,N,W,N,N,N,g,N, ],
   [  N,B,N,N,N,N,W,W,W,W,B,N, ],
   [  N,g,N,N,N,N,N,N,N,N,g,N, ],
   [  N,g,N,N,N,N,N,N,N,N,g,N, ],
   [  N,g,N,N,N,N,N,N,N,N,g,N, ],
   [  N,B,N,N,R,N,N,N,N,N,B,N, ],
   [  N,B,g,g,B,g,g,B,g,g,B,N, ],
   [  N,N,N,N,N,N,N,N,N,N,N,N, ],
],
[
   [  N,N,N,N,N,N,N,N,N,N,N,N, ],
   [  N,B,g,g,B,B,B,B,g,g,B,N, ],
   [  N,B,N,N,N,N,W,N,N,N,B,N, ],
   [  N,g,N,N,N,N,W,N,N,N,g,N, ],
   [  N,g,N,N,N,N,W,N,N,N,g,N, ],
   [  N,g,N,N,N,N,W,N,N,N,g,N, ],
   [  N,B,N,N,N,N,W,W,D,W,B,N, ],
   [  N,g,N,N,N,N,N,N,N,N,g,N, ],
   [  N,g,N,N,N,N,N,N,N,N,g,N, ],
   [  N,g,N,N,N,N,N,N,N,N,g,N, ],
   [  N,B,N,N,N,R,N,N,N,N,B,N, ],
   [  N,B,g,g,B,g,g,B,g,g,B,N, ],
   [  N,N,N,N,N,N,N,N,N,N,N,N, ],
],
[
   [  N,N,N,N,N,N,N,N,N,N,N,N, ],
   [  N,B,B,B,B,B,B,B,B,B,B,N, ],
   [  N,B,N,N,N,N,W,N,q,Q,B,N, ],
   [  N,B,N,N,N,N,W,N,q,Q,B,N, ],
   [  N,B,N,N,N,N,W,N,N,N,B,N, ],
   [  N,B,N,N,N,N,W,N,N,N,B,N, ],
   [  N,B,N,N,N,N,W,W,d,W,B,N, ],
   [  N,B,N,N,N,N,N,N,N,N,B,N, ],
   [  N,B,N,N,N,N,N,N,N,N,B,N, ],
   [  N,B,N,N,N,N,N,N,N,N,B,N, ],
   [  N,B,N,N,N,N,R,N,N,N,B,N, ],
   [  N,B,B,B,B,B,B,B,B,B,B,N, ],
   [  N,N,N,N,N,N,N,N,N,N,N,N, ],
],
[
   [  N,N,N,N,N,N,N,N,N,N,N,N, ],
   [  N,B,B,B,B,B,B,B,B,B,B,N, ],
   [  N,B,W,W,W,W,W,W,W,W,B,N, ],
   [  N,B,W,W,W,W,W,W,W,W,B,N, ],
   [  N,B,W,W,W,W,W,W,W,W,B,N, ],
   [  N,B,W,W,W,W,W,W,W,W,B,N, ],
   [  N,B,W,W,W,W,W,W,W,W,B,N, ],
   [  N,B,W,W,W,W,W,W,W,W,B,N, ],
   [  N,B,W,W,W,W,W,W,W,W,B,N, ],
   [  N,B,W,W,W,W,W,W,W,W,B,N, ],
   [  N,B,W,R,N,N,N,W,W,W,B,N, ],
   [  N,B,B,B,B,B,B,B,B,B,B,N, ],
   [  N,N,N,N,N,N,N,N,N,N,N,N, ],
],
]

first_floor = [
[
   [  N,N,N,N,N,N,N,N,N,N,N,N, ],
   [  N,B,g,g,B,B,B,B,g,g,B,N, ],
   [  N,B,N,N,N,N,N,N,N,N,B,N, ],
   [  N,g,N,N,N,N,N,N,N,N,g,N, ],
   [  N,g,N,N,N,N,N,N,N,N,g,N, ],
   [  N,g,N,N,N,N,N,N,N,N,g,N, ],
   [  N,B,N,N,N,N,N,N,N,N,B,N, ],
   [  N,g,N,N,N,N,N,N,N,N,g,N, ],
   [  N,g,N,N,N,N,N,N,N,N,g,N, ],
   [  N,g,N,N,N,N,N,N,N,N,g,N, ],
   [  N,B,N,N,R,N,N,N,N,N,B,N, ],
   [  N,B,g,g,B,g,g,B,g,g,B,N, ],
   [  N,N,N,N,N,N,N,N,N,N,N,N, ],
],
[
   [  N,N,N,N,N,N,N,N,N,N,N,N, ],
   [  N,B,g,g,B,D,B,B,g,g,B,N, ],
   [  N,B,N,N,N,N,N,N,N,N,B,N, ],
   [  N,g,N,N,N,N,N,N,N,N,g,N, ],
   [  N,g,N,N,N,N,N,N,N,N,g,N, ],
   [  N,g,N,N,N,N,N,N,N,N,g,N, ],
   [  N,B,N,N,N,N,N,N,N,N,B,N, ],
   [  N,g,N,N,N,N,N,N,N,N,g,N, ],
   [  N,g,N,N,N,N,N,N,N,N,g,N, ],
   [  N,g,N,N,N,N,N,N,N,N,g,N, ],
   [  N,B,N,N,N,R,N,N,N,N,B,N, ],
   [  N,B,g,g,B,g,g,B,g,g,B,N, ],
   [  N,N,N,N,N,N,N,N,N,N,N,N, ],
],
[
   [  N,N,N,N,N,N,N,N,N,N,N,N, ],
   [  N,B,B,B,B,d,B,B,B,B,B,N, ],
   [  N,B,N,N,N,N,N,N,N,N,B,N, ],
   [  N,B,N,N,N,N,N,N,N,N,B,N, ],
   [  N,B,N,N,N,N,N,N,N,N,B,N, ],
   [  N,B,c,N,N,N,N,N,N,N,B,N, ],
   [  N,B,c,N,N,N,N,N,N,N,B,N, ],
   [  N,B,c,N,N,N,N,N,N,N,B,N, ],
   [  N,B,N,N,N,N,N,N,N,N,B,N, ],
   [  N,B,N,N,N,N,N,N,N,N,B,N, ],
   [  N,B,N,N,N,N,R,N,N,N,B,N, ],
   [  N,B,B,B,B,B,B,B,B,B,B,N, ],
   [  N,N,N,N,N,N,N,N,N,N,N,N, ],
],
[
   [  N,N,N,N,N,s,N,N,N,N,N,N, ],
   [  N,B,B,B,B,B,B,B,B,B,B,N, ],
   [  N,B,W,W,W,W,W,W,W,W,B,N, ],
   [  N,B,W,W,W,W,W,W,W,W,B,N, ],
   [  N,B,W,W,W,W,W,W,W,W,B,N, ],
   [  N,B,W,W,W,W,W,W,W,W,B,N, ],
   [  N,B,W,W,W,W,W,W,W,W,B,N, ],
   [  N,B,W,W,W,W,W,W,W,W,B,N, ],
   [  N,B,W,W,W,W,W,W,W,W,B,N, ],
   [  N,B,W,W,W,W,W,W,W,W,B,N, ],
   [  N,B,W,W,W,W,W,W,W,W,B,N, ],
   [  N,B,B,B,B,B,B,B,B,B,B,N, ],
   [  N,N,N,N,N,N,N,N,N,N,N,N, ],
],
]

house = roof + second_floor + first_floor

def main(*args):
   house.reverse()
   Build_From_Layers(house,
                     dx=0, # standing in doorway
                     dy=0,
                     dz=0)

if __name__ == "__main__":
   import sys
   main(*sys.argv[1:])
